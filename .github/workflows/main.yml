name: Build, Push, and Deploy
on:
  push:
    branches: [master]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Get short Git SHA
        id: get_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ./store
          push: true
          tags: ahmhi003/suppstore-backend:${{ steps.get_sha.outputs.sha_short }},ahmhi003/suppstore-backend:latest
      - uses: docker/build-push-action@v5
        with:
          context: ./angular-frontend
          push: true
          tags: ahmhi003/suppstore-frontend:${{ steps.get_sha.outputs.sha_short }},ahmhi003/suppstore-frontend:latest
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          SOURCE: "deploy/"
          TARGET: "/home/ubuntu/app"
          SCRIPT_AFTER: |
            set -e
            cd /home/ubuntu/app
            echo "--- Creating .env file from secrets ---"
            > .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "IMAGE_TAG=${{ needs.build-and-push.outputs.version }}" >> .env
            echo "--- Pulling new Docker images ---"
            docker compose -f docker-compose.prod.yml pull
            echo "--- Restarting services ---"
            docker compose -f docker-compose.prod.yml up -d --force-recreate
            echo "--- Cleaning up old images ---"
            docker system prune -af