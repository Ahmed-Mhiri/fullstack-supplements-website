# File: .github/workflows/deploy.yml

name: Build, Push, and Deploy

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_sha.outputs.sha_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short Git SHA
        id: get_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./store
          push: true
          tags: ahmhi003/suppstore-backend:${{ steps.get_sha.outputs.sha_short }},ahmhi003/suppstore-backend:latest
            
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./angular-frontend
          push: true
          tags: ahmhi003/suppstore-frontend:${{ steps.get_sha.outputs.sha_short }},ahmhi003/suppstore-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files for verification
        run: ls -lR
        # This step helps you debug by showing all files in your project.

      - name: Copy configuration files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.prod.yml,nginx.conf"
          target: "/home/ubuntu/app"

      - name: Execute deployment on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ubuntu/app
            
            echo "--- Creating .env file from secrets ---"
            > .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "IMAGE_TAG=${{ needs.build-and-push.outputs.version }}" >> .env
            
            echo "--- Pulling new Docker images ---"
            docker compose -f docker-compose.prod.yml --env-file .env pull
            
            echo "--- Restarting services ---"
            docker compose -f docker-compose.prod.yml --env-file .env up -d --force-recreate
            
            echo "--- Cleaning up old images ---"
            docker system prune -af

            echo "--- Deployment Successful ---"