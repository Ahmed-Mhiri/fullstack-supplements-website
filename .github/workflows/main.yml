name: Build, Push, and Deploy

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_sha.outputs.sha_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get short Git SHA
        id: get_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./store
          push: true
          tags: |
            ahmhi003/suppstore-backend:latest
            ahmhi003/suppstore-backend:${{ steps.get_sha.outputs.sha_short }}
          build-args: |
            DB_URL=jdbc:mysql://database:3306/supplements_db?useSSL=false&allowPublicKeyRetrieval=true
            DB_USER=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            DB_PASS=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./angular-frontend
          push: true
          tags: |
            ahmhi003/suppstore-frontend:latest
            ahmhi003/suppstore-frontend:${{ steps.get_sha.outputs.sha_short }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # This step pulls your repo, including docker-compose.prod.yml and nginx.conf

      - name: Copy config files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.prod.yml,nginx.conf" # Files to copy from your repo root
          target: "/home/ubuntu/app" # Destination directory on EC2

      - name: Execute deployment commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -eo pipefail

            echo "--- Changing to application directory ---"
            cd /home/ubuntu/app || { echo "ERROR: Directory /home/ubuntu/app not found on EC2. Exiting deployment."; exit 1; }

            echo "--- Creating or updating .env file ---"
            > .env # Clears existing .env file
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "IMAGE_TAG=${{ needs.build-and-push.outputs.version }}" >> .env
            if [ ! -s .env ]; then
                echo "ERROR: .env file was not created or is empty. Check related secrets."
                exit 1
            fi
            echo "--- .env file contents ---"
            cat .env

            echo "--- Pulling latest Docker images ---"
            docker compose -f docker-compose.prod.yml --env-file .env pull || { echo "ERROR: docker compose pull command failed."; exit 1; }

            echo "Waiting 15 seconds for MySQL container to initialize..."
            sleep 15

            echo "--- Stopping and removing existing services (force recreate) ---"
            docker compose -f docker-compose.prod.yml --env-file .env down --remove-orphans 2>&1 | tee docker-compose-down.log
            cat docker-compose-down.log

            echo "Waiting 5 seconds before starting services..."
            sleep 5

            echo "--- Bringing up services in detached mode ---"
            docker compose -f docker-compose.prod.yml --env-file .env up -d --force-recreate 2>&1 | tee docker-compose-up.log
            COMPOSE_UP_EXIT_CODE=${PIPESTATUS[0]}
            
            echo "--- docker compose up output ---"
            cat docker-compose-up.log
            
            if [ $COMPOSE_UP_EXIT_CODE -ne 0 ]; then
                echo "CRITICAL ERROR: 'docker compose up' command failed with exit code $COMPOSE_UP_EXIT_CODE."
                echo "Review the 'docker-compose-up.log' above for details."
                exit 1
            fi

            echo "--- Verifying app-nginx-proxy-1 container status ---"
            if ! docker ps | grep -q app-nginx-proxy-1; then
                echo "CRITICAL ERROR: 'app-nginx-proxy-1' container is NOT running after deployment!"
                echo "Attempting to get last logs for 'app-nginx-proxy-1' for diagnostics:"
                docker logs app-nginx-proxy-1 || echo "Could not retrieve logs for app-nginx-proxy-1."
                exit 1
            fi
            
            echo "--- Deployment successful! Listing all running containers ---"
            docker ps

            echo "--- Pruning old Docker images and volumes ---"
            docker system prune -af || echo "WARNING: 'docker system prune' command failed. Check disk space manually."

            echo "Deployment pipeline completed successfully."